// Code generated by tool. DO NOT EDIT.
// See the code_generation package.

package multi_threaded

import (
    "errors"
    "io/ioutil"

	"github.com/klippa-app/go-pdfium/requests"
	"github.com/klippa-app/go-pdfium/responses"
)
{{ range $method := .Methods }}
func (i *pdfiumInstance) {{ $method.Name }}(request *requests.{{ $method.Input }}) (*responses.{{ $method.Output }}, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}

	{{ if eq $method.Name "FPDF_LoadCustomDocument" -}}
	// Since multi-threaded usage implements gRPC, it can't serialize the reader onto that.
	// To make it support the full interface, we just completely read the file into memory.
	fileData, err := ioutil.ReadAll(request.Reader)
	if err != nil {
		return nil, err
	}

	doc, err := i.OpenDocument(&requests.OpenDocument{
		File:     &fileData,
		Password: request.Password,
	})
	if err != nil {
		return nil, err
	}

	return &responses.FPDF_LoadCustomDocument{Document: doc.Document}, nil
    {{- else -}}
	return i.worker.plugin.{{ $method.Name }}(request)
	{{- end }}
}
{{end}}