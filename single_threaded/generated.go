// Code generated by tool. DO NOT EDIT.
// See the code_generation package.

package single_threaded

import (
    "errors"

	"github.com/klippa-app/go-pdfium/requests"
	"github.com/klippa-app/go-pdfium/responses"
)

func (i *pdfiumInstance) FlattenPage(request *requests.FlattenPage) (*responses.FlattenPage, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.FlattenPage(request)
}

func (i *pdfiumInstance) GetDocPermissions(request *requests.GetDocPermissions) (*responses.GetDocPermissions, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetDocPermissions(request)
}

func (i *pdfiumInstance) GetFileVersion(request *requests.GetFileVersion) (*responses.GetFileVersion, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetFileVersion(request)
}

func (i *pdfiumInstance) GetMetadata(request *requests.GetMetadata) (*responses.GetMetadata, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetMetadata(request)
}

func (i *pdfiumInstance) GetPageCount(request *requests.GetPageCount) (*responses.GetPageCount, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageCount(request)
}

func (i *pdfiumInstance) GetPageMode(request *requests.GetPageMode) (*responses.GetPageMode, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageMode(request)
}

func (i *pdfiumInstance) GetPageRotation(request *requests.GetPageRotation) (*responses.GetPageRotation, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageRotation(request)
}

func (i *pdfiumInstance) GetPageSize(request *requests.GetPageSize) (*responses.GetPageSize, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageSize(request)
}

func (i *pdfiumInstance) GetPageSizeInPixels(request *requests.GetPageSizeInPixels) (*responses.GetPageSizeInPixels, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageSizeInPixels(request)
}

func (i *pdfiumInstance) GetPageText(request *requests.GetPageText) (*responses.GetPageText, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageText(request)
}

func (i *pdfiumInstance) GetPageTextStructured(request *requests.GetPageTextStructured) (*responses.GetPageTextStructured, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageTextStructured(request)
}

func (i *pdfiumInstance) GetPageTransparency(request *requests.GetPageTransparency) (*responses.GetPageTransparency, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetPageTransparency(request)
}

func (i *pdfiumInstance) GetSecurityHandlerRevision(request *requests.GetSecurityHandlerRevision) (*responses.GetSecurityHandlerRevision, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.GetSecurityHandlerRevision(request)
}

func (i *pdfiumInstance) LoadPage(request *requests.LoadPage) (*responses.LoadPage, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.LoadPage(request)
}

func (i *pdfiumInstance) OpenDocument(request *requests.OpenDocument) (*responses.OpenDocument, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.OpenDocument(request)
}

func (i *pdfiumInstance) RenderPageInDPI(request *requests.RenderPageInDPI) (*responses.RenderPage, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.RenderPageInDPI(request)
}

func (i *pdfiumInstance) RenderPageInPixels(request *requests.RenderPageInPixels) (*responses.RenderPage, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.RenderPageInPixels(request)
}

func (i *pdfiumInstance) RenderPagesInDPI(request *requests.RenderPagesInDPI) (*responses.RenderPages, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.RenderPagesInDPI(request)
}

func (i *pdfiumInstance) RenderPagesInPixels(request *requests.RenderPagesInPixels) (*responses.RenderPages, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.RenderPagesInPixels(request)
}

func (i *pdfiumInstance) RenderToFile(request *requests.RenderToFile) (*responses.RenderToFile, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.RenderToFile(request)
}

func (i *pdfiumInstance) UnloadPage(request *requests.UnloadPage) (*responses.UnloadPage, error) {
	if i.closed {
		return nil, errors.New("instance is closed")
	}
	return i.pdfium.UnloadPage(request)
}
