// Code generated by tool. DO NOT EDIT.
// See the code_generation package.

package commons

import (
	"github.com/klippa-app/go-pdfium/references"
	"github.com/klippa-app/go-pdfium/requests"
	"github.com/klippa-app/go-pdfium/responses"
)

type Pdfium interface {
    Ping() (string, error)
    FPDFAction_GetDest(*requests.FPDFAction_GetDest) (*responses.FPDFAction_GetDest, error)
    FPDFAction_GetFilePath(*requests.FPDFAction_GetFilePath) (*responses.FPDFAction_GetFilePath, error)
    FPDFAction_GetType(*requests.FPDFAction_GetType) (*responses.FPDFAction_GetType, error)
    FPDFAction_GetURIPath(*requests.FPDFAction_GetURIPath) (*responses.FPDFAction_GetURIPath, error)
    FPDFBookmark_Find(*requests.FPDFBookmark_Find) (*responses.FPDFBookmark_Find, error)
    FPDFBookmark_GetAction(*requests.FPDFBookmark_GetAction) (*responses.FPDFBookmark_GetAction, error)
    FPDFBookmark_GetDest(*requests.FPDFBookmark_GetDest) (*responses.FPDFBookmark_GetDest, error)
    FPDFBookmark_GetFirstChild(*requests.FPDFBookmark_GetFirstChild) (*responses.FPDFBookmark_GetFirstChild, error)
    FPDFBookmark_GetNextSibling(*requests.FPDFBookmark_GetNextSibling) (*responses.FPDFBookmark_GetNextSibling, error)
    FPDFBookmark_GetTitle(*requests.FPDFBookmark_GetTitle) (*responses.FPDFBookmark_GetTitle, error)
    FPDFDest_GetDestPageIndex(*requests.FPDFDest_GetDestPageIndex) (*responses.FPDFDest_GetDestPageIndex, error)
    FPDFDest_GetLocationInPage(*requests.FPDFDest_GetLocationInPage) (*responses.FPDFDest_GetLocationInPage, error)
    FPDFDest_GetView(*requests.FPDFDest_GetView) (*responses.FPDFDest_GetView, error)
    FPDFDoc_GetPageMode(*requests.FPDFDoc_GetPageMode) (*responses.FPDFDoc_GetPageMode, error)
    FPDFLink_CountQuadPoints(*requests.FPDFLink_CountQuadPoints) (*responses.FPDFLink_CountQuadPoints, error)
    FPDFLink_Enumerate(*requests.FPDFLink_Enumerate) (*responses.FPDFLink_Enumerate, error)
    FPDFLink_GetAction(*requests.FPDFLink_GetAction) (*responses.FPDFLink_GetAction, error)
    FPDFLink_GetAnnot(*requests.FPDFLink_GetAnnot) (*responses.FPDFLink_GetAnnot, error)
    FPDFLink_GetAnnotRect(*requests.FPDFLink_GetAnnotRect) (*responses.FPDFLink_GetAnnotRect, error)
    FPDFLink_GetDest(*requests.FPDFLink_GetDest) (*responses.FPDFLink_GetDest, error)
    FPDFLink_GetLinkAtPoint(*requests.FPDFLink_GetLinkAtPoint) (*responses.FPDFLink_GetLinkAtPoint, error)
    FPDFLink_GetLinkZOrderAtPoint(*requests.FPDFLink_GetLinkZOrderAtPoint) (*responses.FPDFLink_GetLinkZOrderAtPoint, error)
    FPDFLink_GetQuadPoints(*requests.FPDFLink_GetQuadPoints) (*responses.FPDFLink_GetQuadPoints, error)
    FPDFPage_Flatten(*requests.FPDFPage_Flatten) (*responses.FPDFPage_Flatten, error)
    FPDFPage_GetRotation(*requests.FPDFPage_GetRotation) (*responses.FPDFPage_GetRotation, error)
    FPDFPage_HasTransparency(*requests.FPDFPage_HasTransparency) (*responses.FPDFPage_HasTransparency, error)
    FPDFPage_SetRotation(*requests.FPDFPage_SetRotation) (*responses.FPDFPage_SetRotation, error)
    FPDF_ClosePage(*requests.FPDF_ClosePage) (*responses.FPDF_ClosePage, error)
    FPDF_CloseXObject(*requests.FPDF_CloseXObject) (*responses.FPDF_CloseXObject, error)
    FPDF_CopyViewerPreferences(*requests.FPDF_CopyViewerPreferences) (*responses.FPDF_CopyViewerPreferences, error)
    FPDF_CreateNewDocument(*requests.FPDF_CreateNewDocument) (*responses.FPDF_CreateNewDocument, error)
    FPDF_GetDocPermissions(*requests.FPDF_GetDocPermissions) (*responses.FPDF_GetDocPermissions, error)
    FPDF_GetFileIdentifier(*requests.FPDF_GetFileIdentifier) (*responses.FPDF_GetFileIdentifier, error)
    FPDF_GetFileVersion(*requests.FPDF_GetFileVersion) (*responses.FPDF_GetFileVersion, error)
    FPDF_GetLastError(*requests.FPDF_GetLastError) (*responses.FPDF_GetLastError, error)
    FPDF_GetMetaText(*requests.FPDF_GetMetaText) (*responses.FPDF_GetMetaText, error)
    FPDF_GetPageAAction(*requests.FPDF_GetPageAAction) (*responses.FPDF_GetPageAAction, error)
    FPDF_GetPageCount(*requests.FPDF_GetPageCount) (*responses.FPDF_GetPageCount, error)
    FPDF_GetPageHeight(*requests.FPDF_GetPageHeight) (*responses.FPDF_GetPageHeight, error)
    FPDF_GetPageLabel(*requests.FPDF_GetPageLabel) (*responses.FPDF_GetPageLabel, error)
    FPDF_GetPageSizeByIndex(*requests.FPDF_GetPageSizeByIndex) (*responses.FPDF_GetPageSizeByIndex, error)
    FPDF_GetPageWidth(*requests.FPDF_GetPageWidth) (*responses.FPDF_GetPageWidth, error)
    FPDF_GetSecurityHandlerRevision(*requests.FPDF_GetSecurityHandlerRevision) (*responses.FPDF_GetSecurityHandlerRevision, error)
    FPDF_ImportNPagesToOne(*requests.FPDF_ImportNPagesToOne) (*responses.FPDF_ImportNPagesToOne, error)
    FPDF_ImportPages(*requests.FPDF_ImportPages) (*responses.FPDF_ImportPages, error)
    FPDF_ImportPagesByIndex(*requests.FPDF_ImportPagesByIndex) (*responses.FPDF_ImportPagesByIndex, error)
    FPDF_LoadPage(*requests.FPDF_LoadPage) (*responses.FPDF_LoadPage, error)
    FPDF_NewFormObjectFromXObject(*requests.FPDF_NewFormObjectFromXObject) (*responses.FPDF_NewFormObjectFromXObject, error)
    FPDF_NewXObjectFromPage(*requests.FPDF_NewXObjectFromPage) (*responses.FPDF_NewXObjectFromPage, error)
    FPDF_SaveAsCopy(*requests.FPDF_SaveAsCopy) (*responses.FPDF_SaveAsCopy, error)
    FPDF_SaveWithVersion(*requests.FPDF_SaveWithVersion) (*responses.FPDF_SaveWithVersion, error)
    FPDF_SetSandBoxPolicy(*requests.FPDF_SetSandBoxPolicy) (*responses.FPDF_SetSandBoxPolicy, error)
    GetBookmarks(*requests.GetBookmarks) (*responses.GetBookmarks, error)
    GetMetaData(*requests.GetMetaData) (*responses.GetMetaData, error)
    GetPageSize(*requests.GetPageSize) (*responses.GetPageSize, error)
    GetPageSizeInPixels(*requests.GetPageSizeInPixels) (*responses.GetPageSizeInPixels, error)
    GetPageText(*requests.GetPageText) (*responses.GetPageText, error)
    GetPageTextStructured(*requests.GetPageTextStructured) (*responses.GetPageTextStructured, error)
    OpenDocument(*requests.OpenDocument) (*responses.OpenDocument, error)
    RenderPageInDPI(*requests.RenderPageInDPI) (*responses.RenderPage, error)
    RenderPageInPixels(*requests.RenderPageInPixels) (*responses.RenderPage, error)
    RenderPagesInDPI(*requests.RenderPagesInDPI) (*responses.RenderPages, error)
    RenderPagesInPixels(*requests.RenderPagesInPixels) (*responses.RenderPages, error)
    RenderToFile(*requests.RenderToFile) (*responses.RenderToFile, error)
    FPDF_CloseDocument(references.FPDF_DOCUMENT) error
    Close() error
}


func (g *PdfiumRPC) FPDFAction_GetDest(request *requests.FPDFAction_GetDest) (*responses.FPDFAction_GetDest, error) {
	resp := &responses.FPDFAction_GetDest{}
	err := g.client.Call("Plugin.FPDFAction_GetDest", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAction_GetFilePath(request *requests.FPDFAction_GetFilePath) (*responses.FPDFAction_GetFilePath, error) {
	resp := &responses.FPDFAction_GetFilePath{}
	err := g.client.Call("Plugin.FPDFAction_GetFilePath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAction_GetType(request *requests.FPDFAction_GetType) (*responses.FPDFAction_GetType, error) {
	resp := &responses.FPDFAction_GetType{}
	err := g.client.Call("Plugin.FPDFAction_GetType", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFAction_GetURIPath(request *requests.FPDFAction_GetURIPath) (*responses.FPDFAction_GetURIPath, error) {
	resp := &responses.FPDFAction_GetURIPath{}
	err := g.client.Call("Plugin.FPDFAction_GetURIPath", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_Find(request *requests.FPDFBookmark_Find) (*responses.FPDFBookmark_Find, error) {
	resp := &responses.FPDFBookmark_Find{}
	err := g.client.Call("Plugin.FPDFBookmark_Find", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetAction(request *requests.FPDFBookmark_GetAction) (*responses.FPDFBookmark_GetAction, error) {
	resp := &responses.FPDFBookmark_GetAction{}
	err := g.client.Call("Plugin.FPDFBookmark_GetAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetDest(request *requests.FPDFBookmark_GetDest) (*responses.FPDFBookmark_GetDest, error) {
	resp := &responses.FPDFBookmark_GetDest{}
	err := g.client.Call("Plugin.FPDFBookmark_GetDest", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetFirstChild(request *requests.FPDFBookmark_GetFirstChild) (*responses.FPDFBookmark_GetFirstChild, error) {
	resp := &responses.FPDFBookmark_GetFirstChild{}
	err := g.client.Call("Plugin.FPDFBookmark_GetFirstChild", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetNextSibling(request *requests.FPDFBookmark_GetNextSibling) (*responses.FPDFBookmark_GetNextSibling, error) {
	resp := &responses.FPDFBookmark_GetNextSibling{}
	err := g.client.Call("Plugin.FPDFBookmark_GetNextSibling", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFBookmark_GetTitle(request *requests.FPDFBookmark_GetTitle) (*responses.FPDFBookmark_GetTitle, error) {
	resp := &responses.FPDFBookmark_GetTitle{}
	err := g.client.Call("Plugin.FPDFBookmark_GetTitle", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDest_GetDestPageIndex(request *requests.FPDFDest_GetDestPageIndex) (*responses.FPDFDest_GetDestPageIndex, error) {
	resp := &responses.FPDFDest_GetDestPageIndex{}
	err := g.client.Call("Plugin.FPDFDest_GetDestPageIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDest_GetLocationInPage(request *requests.FPDFDest_GetLocationInPage) (*responses.FPDFDest_GetLocationInPage, error) {
	resp := &responses.FPDFDest_GetLocationInPage{}
	err := g.client.Call("Plugin.FPDFDest_GetLocationInPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDest_GetView(request *requests.FPDFDest_GetView) (*responses.FPDFDest_GetView, error) {
	resp := &responses.FPDFDest_GetView{}
	err := g.client.Call("Plugin.FPDFDest_GetView", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFDoc_GetPageMode(request *requests.FPDFDoc_GetPageMode) (*responses.FPDFDoc_GetPageMode, error) {
	resp := &responses.FPDFDoc_GetPageMode{}
	err := g.client.Call("Plugin.FPDFDoc_GetPageMode", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_CountQuadPoints(request *requests.FPDFLink_CountQuadPoints) (*responses.FPDFLink_CountQuadPoints, error) {
	resp := &responses.FPDFLink_CountQuadPoints{}
	err := g.client.Call("Plugin.FPDFLink_CountQuadPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_Enumerate(request *requests.FPDFLink_Enumerate) (*responses.FPDFLink_Enumerate, error) {
	resp := &responses.FPDFLink_Enumerate{}
	err := g.client.Call("Plugin.FPDFLink_Enumerate", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetAction(request *requests.FPDFLink_GetAction) (*responses.FPDFLink_GetAction, error) {
	resp := &responses.FPDFLink_GetAction{}
	err := g.client.Call("Plugin.FPDFLink_GetAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetAnnot(request *requests.FPDFLink_GetAnnot) (*responses.FPDFLink_GetAnnot, error) {
	resp := &responses.FPDFLink_GetAnnot{}
	err := g.client.Call("Plugin.FPDFLink_GetAnnot", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetAnnotRect(request *requests.FPDFLink_GetAnnotRect) (*responses.FPDFLink_GetAnnotRect, error) {
	resp := &responses.FPDFLink_GetAnnotRect{}
	err := g.client.Call("Plugin.FPDFLink_GetAnnotRect", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetDest(request *requests.FPDFLink_GetDest) (*responses.FPDFLink_GetDest, error) {
	resp := &responses.FPDFLink_GetDest{}
	err := g.client.Call("Plugin.FPDFLink_GetDest", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetLinkAtPoint(request *requests.FPDFLink_GetLinkAtPoint) (*responses.FPDFLink_GetLinkAtPoint, error) {
	resp := &responses.FPDFLink_GetLinkAtPoint{}
	err := g.client.Call("Plugin.FPDFLink_GetLinkAtPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetLinkZOrderAtPoint(request *requests.FPDFLink_GetLinkZOrderAtPoint) (*responses.FPDFLink_GetLinkZOrderAtPoint, error) {
	resp := &responses.FPDFLink_GetLinkZOrderAtPoint{}
	err := g.client.Call("Plugin.FPDFLink_GetLinkZOrderAtPoint", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFLink_GetQuadPoints(request *requests.FPDFLink_GetQuadPoints) (*responses.FPDFLink_GetQuadPoints, error) {
	resp := &responses.FPDFLink_GetQuadPoints{}
	err := g.client.Call("Plugin.FPDFLink_GetQuadPoints", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_Flatten(request *requests.FPDFPage_Flatten) (*responses.FPDFPage_Flatten, error) {
	resp := &responses.FPDFPage_Flatten{}
	err := g.client.Call("Plugin.FPDFPage_Flatten", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_GetRotation(request *requests.FPDFPage_GetRotation) (*responses.FPDFPage_GetRotation, error) {
	resp := &responses.FPDFPage_GetRotation{}
	err := g.client.Call("Plugin.FPDFPage_GetRotation", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_HasTransparency(request *requests.FPDFPage_HasTransparency) (*responses.FPDFPage_HasTransparency, error) {
	resp := &responses.FPDFPage_HasTransparency{}
	err := g.client.Call("Plugin.FPDFPage_HasTransparency", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDFPage_SetRotation(request *requests.FPDFPage_SetRotation) (*responses.FPDFPage_SetRotation, error) {
	resp := &responses.FPDFPage_SetRotation{}
	err := g.client.Call("Plugin.FPDFPage_SetRotation", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ClosePage(request *requests.FPDF_ClosePage) (*responses.FPDF_ClosePage, error) {
	resp := &responses.FPDF_ClosePage{}
	err := g.client.Call("Plugin.FPDF_ClosePage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CloseXObject(request *requests.FPDF_CloseXObject) (*responses.FPDF_CloseXObject, error) {
	resp := &responses.FPDF_CloseXObject{}
	err := g.client.Call("Plugin.FPDF_CloseXObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CopyViewerPreferences(request *requests.FPDF_CopyViewerPreferences) (*responses.FPDF_CopyViewerPreferences, error) {
	resp := &responses.FPDF_CopyViewerPreferences{}
	err := g.client.Call("Plugin.FPDF_CopyViewerPreferences", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_CreateNewDocument(request *requests.FPDF_CreateNewDocument) (*responses.FPDF_CreateNewDocument, error) {
	resp := &responses.FPDF_CreateNewDocument{}
	err := g.client.Call("Plugin.FPDF_CreateNewDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetDocPermissions(request *requests.FPDF_GetDocPermissions) (*responses.FPDF_GetDocPermissions, error) {
	resp := &responses.FPDF_GetDocPermissions{}
	err := g.client.Call("Plugin.FPDF_GetDocPermissions", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetFileIdentifier(request *requests.FPDF_GetFileIdentifier) (*responses.FPDF_GetFileIdentifier, error) {
	resp := &responses.FPDF_GetFileIdentifier{}
	err := g.client.Call("Plugin.FPDF_GetFileIdentifier", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetFileVersion(request *requests.FPDF_GetFileVersion) (*responses.FPDF_GetFileVersion, error) {
	resp := &responses.FPDF_GetFileVersion{}
	err := g.client.Call("Plugin.FPDF_GetFileVersion", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetLastError(request *requests.FPDF_GetLastError) (*responses.FPDF_GetLastError, error) {
	resp := &responses.FPDF_GetLastError{}
	err := g.client.Call("Plugin.FPDF_GetLastError", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetMetaText(request *requests.FPDF_GetMetaText) (*responses.FPDF_GetMetaText, error) {
	resp := &responses.FPDF_GetMetaText{}
	err := g.client.Call("Plugin.FPDF_GetMetaText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageAAction(request *requests.FPDF_GetPageAAction) (*responses.FPDF_GetPageAAction, error) {
	resp := &responses.FPDF_GetPageAAction{}
	err := g.client.Call("Plugin.FPDF_GetPageAAction", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageCount(request *requests.FPDF_GetPageCount) (*responses.FPDF_GetPageCount, error) {
	resp := &responses.FPDF_GetPageCount{}
	err := g.client.Call("Plugin.FPDF_GetPageCount", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageHeight(request *requests.FPDF_GetPageHeight) (*responses.FPDF_GetPageHeight, error) {
	resp := &responses.FPDF_GetPageHeight{}
	err := g.client.Call("Plugin.FPDF_GetPageHeight", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageLabel(request *requests.FPDF_GetPageLabel) (*responses.FPDF_GetPageLabel, error) {
	resp := &responses.FPDF_GetPageLabel{}
	err := g.client.Call("Plugin.FPDF_GetPageLabel", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageSizeByIndex(request *requests.FPDF_GetPageSizeByIndex) (*responses.FPDF_GetPageSizeByIndex, error) {
	resp := &responses.FPDF_GetPageSizeByIndex{}
	err := g.client.Call("Plugin.FPDF_GetPageSizeByIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetPageWidth(request *requests.FPDF_GetPageWidth) (*responses.FPDF_GetPageWidth, error) {
	resp := &responses.FPDF_GetPageWidth{}
	err := g.client.Call("Plugin.FPDF_GetPageWidth", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_GetSecurityHandlerRevision(request *requests.FPDF_GetSecurityHandlerRevision) (*responses.FPDF_GetSecurityHandlerRevision, error) {
	resp := &responses.FPDF_GetSecurityHandlerRevision{}
	err := g.client.Call("Plugin.FPDF_GetSecurityHandlerRevision", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ImportNPagesToOne(request *requests.FPDF_ImportNPagesToOne) (*responses.FPDF_ImportNPagesToOne, error) {
	resp := &responses.FPDF_ImportNPagesToOne{}
	err := g.client.Call("Plugin.FPDF_ImportNPagesToOne", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ImportPages(request *requests.FPDF_ImportPages) (*responses.FPDF_ImportPages, error) {
	resp := &responses.FPDF_ImportPages{}
	err := g.client.Call("Plugin.FPDF_ImportPages", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_ImportPagesByIndex(request *requests.FPDF_ImportPagesByIndex) (*responses.FPDF_ImportPagesByIndex, error) {
	resp := &responses.FPDF_ImportPagesByIndex{}
	err := g.client.Call("Plugin.FPDF_ImportPagesByIndex", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_LoadPage(request *requests.FPDF_LoadPage) (*responses.FPDF_LoadPage, error) {
	resp := &responses.FPDF_LoadPage{}
	err := g.client.Call("Plugin.FPDF_LoadPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_NewFormObjectFromXObject(request *requests.FPDF_NewFormObjectFromXObject) (*responses.FPDF_NewFormObjectFromXObject, error) {
	resp := &responses.FPDF_NewFormObjectFromXObject{}
	err := g.client.Call("Plugin.FPDF_NewFormObjectFromXObject", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_NewXObjectFromPage(request *requests.FPDF_NewXObjectFromPage) (*responses.FPDF_NewXObjectFromPage, error) {
	resp := &responses.FPDF_NewXObjectFromPage{}
	err := g.client.Call("Plugin.FPDF_NewXObjectFromPage", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SaveAsCopy(request *requests.FPDF_SaveAsCopy) (*responses.FPDF_SaveAsCopy, error) {
	resp := &responses.FPDF_SaveAsCopy{}
	err := g.client.Call("Plugin.FPDF_SaveAsCopy", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SaveWithVersion(request *requests.FPDF_SaveWithVersion) (*responses.FPDF_SaveWithVersion, error) {
	resp := &responses.FPDF_SaveWithVersion{}
	err := g.client.Call("Plugin.FPDF_SaveWithVersion", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) FPDF_SetSandBoxPolicy(request *requests.FPDF_SetSandBoxPolicy) (*responses.FPDF_SetSandBoxPolicy, error) {
	resp := &responses.FPDF_SetSandBoxPolicy{}
	err := g.client.Call("Plugin.FPDF_SetSandBoxPolicy", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetBookmarks(request *requests.GetBookmarks) (*responses.GetBookmarks, error) {
	resp := &responses.GetBookmarks{}
	err := g.client.Call("Plugin.GetBookmarks", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetMetaData(request *requests.GetMetaData) (*responses.GetMetaData, error) {
	resp := &responses.GetMetaData{}
	err := g.client.Call("Plugin.GetMetaData", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageSize(request *requests.GetPageSize) (*responses.GetPageSize, error) {
	resp := &responses.GetPageSize{}
	err := g.client.Call("Plugin.GetPageSize", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageSizeInPixels(request *requests.GetPageSizeInPixels) (*responses.GetPageSizeInPixels, error) {
	resp := &responses.GetPageSizeInPixels{}
	err := g.client.Call("Plugin.GetPageSizeInPixels", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageText(request *requests.GetPageText) (*responses.GetPageText, error) {
	resp := &responses.GetPageText{}
	err := g.client.Call("Plugin.GetPageText", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) GetPageTextStructured(request *requests.GetPageTextStructured) (*responses.GetPageTextStructured, error) {
	resp := &responses.GetPageTextStructured{}
	err := g.client.Call("Plugin.GetPageTextStructured", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) OpenDocument(request *requests.OpenDocument) (*responses.OpenDocument, error) {
	resp := &responses.OpenDocument{}
	err := g.client.Call("Plugin.OpenDocument", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPageInDPI(request *requests.RenderPageInDPI) (*responses.RenderPage, error) {
	resp := &responses.RenderPage{}
	err := g.client.Call("Plugin.RenderPageInDPI", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPageInPixels(request *requests.RenderPageInPixels) (*responses.RenderPage, error) {
	resp := &responses.RenderPage{}
	err := g.client.Call("Plugin.RenderPageInPixels", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPagesInDPI(request *requests.RenderPagesInDPI) (*responses.RenderPages, error) {
	resp := &responses.RenderPages{}
	err := g.client.Call("Plugin.RenderPagesInDPI", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderPagesInPixels(request *requests.RenderPagesInPixels) (*responses.RenderPages, error) {
	resp := &responses.RenderPages{}
	err := g.client.Call("Plugin.RenderPagesInPixels", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *PdfiumRPC) RenderToFile(request *requests.RenderToFile) (*responses.RenderToFile, error) {
	resp := &responses.RenderToFile{}
	err := g.client.Call("Plugin.RenderToFile", request, resp)
	if err != nil {
		return nil, err
	}

	return resp, nil
}



func (s *PdfiumRPCServer) FPDFAction_GetDest(request *requests.FPDFAction_GetDest, resp *responses.FPDFAction_GetDest) error {
	var err error
	implResp, err := s.Impl.FPDFAction_GetDest(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAction_GetFilePath(request *requests.FPDFAction_GetFilePath, resp *responses.FPDFAction_GetFilePath) error {
	var err error
	implResp, err := s.Impl.FPDFAction_GetFilePath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAction_GetType(request *requests.FPDFAction_GetType, resp *responses.FPDFAction_GetType) error {
	var err error
	implResp, err := s.Impl.FPDFAction_GetType(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFAction_GetURIPath(request *requests.FPDFAction_GetURIPath, resp *responses.FPDFAction_GetURIPath) error {
	var err error
	implResp, err := s.Impl.FPDFAction_GetURIPath(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_Find(request *requests.FPDFBookmark_Find, resp *responses.FPDFBookmark_Find) error {
	var err error
	implResp, err := s.Impl.FPDFBookmark_Find(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetAction(request *requests.FPDFBookmark_GetAction, resp *responses.FPDFBookmark_GetAction) error {
	var err error
	implResp, err := s.Impl.FPDFBookmark_GetAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetDest(request *requests.FPDFBookmark_GetDest, resp *responses.FPDFBookmark_GetDest) error {
	var err error
	implResp, err := s.Impl.FPDFBookmark_GetDest(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetFirstChild(request *requests.FPDFBookmark_GetFirstChild, resp *responses.FPDFBookmark_GetFirstChild) error {
	var err error
	implResp, err := s.Impl.FPDFBookmark_GetFirstChild(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetNextSibling(request *requests.FPDFBookmark_GetNextSibling, resp *responses.FPDFBookmark_GetNextSibling) error {
	var err error
	implResp, err := s.Impl.FPDFBookmark_GetNextSibling(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFBookmark_GetTitle(request *requests.FPDFBookmark_GetTitle, resp *responses.FPDFBookmark_GetTitle) error {
	var err error
	implResp, err := s.Impl.FPDFBookmark_GetTitle(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDest_GetDestPageIndex(request *requests.FPDFDest_GetDestPageIndex, resp *responses.FPDFDest_GetDestPageIndex) error {
	var err error
	implResp, err := s.Impl.FPDFDest_GetDestPageIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDest_GetLocationInPage(request *requests.FPDFDest_GetLocationInPage, resp *responses.FPDFDest_GetLocationInPage) error {
	var err error
	implResp, err := s.Impl.FPDFDest_GetLocationInPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDest_GetView(request *requests.FPDFDest_GetView, resp *responses.FPDFDest_GetView) error {
	var err error
	implResp, err := s.Impl.FPDFDest_GetView(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFDoc_GetPageMode(request *requests.FPDFDoc_GetPageMode, resp *responses.FPDFDoc_GetPageMode) error {
	var err error
	implResp, err := s.Impl.FPDFDoc_GetPageMode(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_CountQuadPoints(request *requests.FPDFLink_CountQuadPoints, resp *responses.FPDFLink_CountQuadPoints) error {
	var err error
	implResp, err := s.Impl.FPDFLink_CountQuadPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_Enumerate(request *requests.FPDFLink_Enumerate, resp *responses.FPDFLink_Enumerate) error {
	var err error
	implResp, err := s.Impl.FPDFLink_Enumerate(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetAction(request *requests.FPDFLink_GetAction, resp *responses.FPDFLink_GetAction) error {
	var err error
	implResp, err := s.Impl.FPDFLink_GetAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetAnnot(request *requests.FPDFLink_GetAnnot, resp *responses.FPDFLink_GetAnnot) error {
	var err error
	implResp, err := s.Impl.FPDFLink_GetAnnot(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetAnnotRect(request *requests.FPDFLink_GetAnnotRect, resp *responses.FPDFLink_GetAnnotRect) error {
	var err error
	implResp, err := s.Impl.FPDFLink_GetAnnotRect(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetDest(request *requests.FPDFLink_GetDest, resp *responses.FPDFLink_GetDest) error {
	var err error
	implResp, err := s.Impl.FPDFLink_GetDest(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetLinkAtPoint(request *requests.FPDFLink_GetLinkAtPoint, resp *responses.FPDFLink_GetLinkAtPoint) error {
	var err error
	implResp, err := s.Impl.FPDFLink_GetLinkAtPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetLinkZOrderAtPoint(request *requests.FPDFLink_GetLinkZOrderAtPoint, resp *responses.FPDFLink_GetLinkZOrderAtPoint) error {
	var err error
	implResp, err := s.Impl.FPDFLink_GetLinkZOrderAtPoint(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFLink_GetQuadPoints(request *requests.FPDFLink_GetQuadPoints, resp *responses.FPDFLink_GetQuadPoints) error {
	var err error
	implResp, err := s.Impl.FPDFLink_GetQuadPoints(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_Flatten(request *requests.FPDFPage_Flatten, resp *responses.FPDFPage_Flatten) error {
	var err error
	implResp, err := s.Impl.FPDFPage_Flatten(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_GetRotation(request *requests.FPDFPage_GetRotation, resp *responses.FPDFPage_GetRotation) error {
	var err error
	implResp, err := s.Impl.FPDFPage_GetRotation(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_HasTransparency(request *requests.FPDFPage_HasTransparency, resp *responses.FPDFPage_HasTransparency) error {
	var err error
	implResp, err := s.Impl.FPDFPage_HasTransparency(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDFPage_SetRotation(request *requests.FPDFPage_SetRotation, resp *responses.FPDFPage_SetRotation) error {
	var err error
	implResp, err := s.Impl.FPDFPage_SetRotation(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ClosePage(request *requests.FPDF_ClosePage, resp *responses.FPDF_ClosePage) error {
	var err error
	implResp, err := s.Impl.FPDF_ClosePage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CloseXObject(request *requests.FPDF_CloseXObject, resp *responses.FPDF_CloseXObject) error {
	var err error
	implResp, err := s.Impl.FPDF_CloseXObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CopyViewerPreferences(request *requests.FPDF_CopyViewerPreferences, resp *responses.FPDF_CopyViewerPreferences) error {
	var err error
	implResp, err := s.Impl.FPDF_CopyViewerPreferences(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_CreateNewDocument(request *requests.FPDF_CreateNewDocument, resp *responses.FPDF_CreateNewDocument) error {
	var err error
	implResp, err := s.Impl.FPDF_CreateNewDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetDocPermissions(request *requests.FPDF_GetDocPermissions, resp *responses.FPDF_GetDocPermissions) error {
	var err error
	implResp, err := s.Impl.FPDF_GetDocPermissions(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetFileIdentifier(request *requests.FPDF_GetFileIdentifier, resp *responses.FPDF_GetFileIdentifier) error {
	var err error
	implResp, err := s.Impl.FPDF_GetFileIdentifier(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetFileVersion(request *requests.FPDF_GetFileVersion, resp *responses.FPDF_GetFileVersion) error {
	var err error
	implResp, err := s.Impl.FPDF_GetFileVersion(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetLastError(request *requests.FPDF_GetLastError, resp *responses.FPDF_GetLastError) error {
	var err error
	implResp, err := s.Impl.FPDF_GetLastError(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetMetaText(request *requests.FPDF_GetMetaText, resp *responses.FPDF_GetMetaText) error {
	var err error
	implResp, err := s.Impl.FPDF_GetMetaText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageAAction(request *requests.FPDF_GetPageAAction, resp *responses.FPDF_GetPageAAction) error {
	var err error
	implResp, err := s.Impl.FPDF_GetPageAAction(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageCount(request *requests.FPDF_GetPageCount, resp *responses.FPDF_GetPageCount) error {
	var err error
	implResp, err := s.Impl.FPDF_GetPageCount(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageHeight(request *requests.FPDF_GetPageHeight, resp *responses.FPDF_GetPageHeight) error {
	var err error
	implResp, err := s.Impl.FPDF_GetPageHeight(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageLabel(request *requests.FPDF_GetPageLabel, resp *responses.FPDF_GetPageLabel) error {
	var err error
	implResp, err := s.Impl.FPDF_GetPageLabel(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageSizeByIndex(request *requests.FPDF_GetPageSizeByIndex, resp *responses.FPDF_GetPageSizeByIndex) error {
	var err error
	implResp, err := s.Impl.FPDF_GetPageSizeByIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetPageWidth(request *requests.FPDF_GetPageWidth, resp *responses.FPDF_GetPageWidth) error {
	var err error
	implResp, err := s.Impl.FPDF_GetPageWidth(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_GetSecurityHandlerRevision(request *requests.FPDF_GetSecurityHandlerRevision, resp *responses.FPDF_GetSecurityHandlerRevision) error {
	var err error
	implResp, err := s.Impl.FPDF_GetSecurityHandlerRevision(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ImportNPagesToOne(request *requests.FPDF_ImportNPagesToOne, resp *responses.FPDF_ImportNPagesToOne) error {
	var err error
	implResp, err := s.Impl.FPDF_ImportNPagesToOne(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ImportPages(request *requests.FPDF_ImportPages, resp *responses.FPDF_ImportPages) error {
	var err error
	implResp, err := s.Impl.FPDF_ImportPages(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_ImportPagesByIndex(request *requests.FPDF_ImportPagesByIndex, resp *responses.FPDF_ImportPagesByIndex) error {
	var err error
	implResp, err := s.Impl.FPDF_ImportPagesByIndex(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_LoadPage(request *requests.FPDF_LoadPage, resp *responses.FPDF_LoadPage) error {
	var err error
	implResp, err := s.Impl.FPDF_LoadPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_NewFormObjectFromXObject(request *requests.FPDF_NewFormObjectFromXObject, resp *responses.FPDF_NewFormObjectFromXObject) error {
	var err error
	implResp, err := s.Impl.FPDF_NewFormObjectFromXObject(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_NewXObjectFromPage(request *requests.FPDF_NewXObjectFromPage, resp *responses.FPDF_NewXObjectFromPage) error {
	var err error
	implResp, err := s.Impl.FPDF_NewXObjectFromPage(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SaveAsCopy(request *requests.FPDF_SaveAsCopy, resp *responses.FPDF_SaveAsCopy) error {
	var err error
	implResp, err := s.Impl.FPDF_SaveAsCopy(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SaveWithVersion(request *requests.FPDF_SaveWithVersion, resp *responses.FPDF_SaveWithVersion) error {
	var err error
	implResp, err := s.Impl.FPDF_SaveWithVersion(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) FPDF_SetSandBoxPolicy(request *requests.FPDF_SetSandBoxPolicy, resp *responses.FPDF_SetSandBoxPolicy) error {
	var err error
	implResp, err := s.Impl.FPDF_SetSandBoxPolicy(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetBookmarks(request *requests.GetBookmarks, resp *responses.GetBookmarks) error {
	var err error
	implResp, err := s.Impl.GetBookmarks(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetMetaData(request *requests.GetMetaData, resp *responses.GetMetaData) error {
	var err error
	implResp, err := s.Impl.GetMetaData(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageSize(request *requests.GetPageSize, resp *responses.GetPageSize) error {
	var err error
	implResp, err := s.Impl.GetPageSize(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageSizeInPixels(request *requests.GetPageSizeInPixels, resp *responses.GetPageSizeInPixels) error {
	var err error
	implResp, err := s.Impl.GetPageSizeInPixels(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageText(request *requests.GetPageText, resp *responses.GetPageText) error {
	var err error
	implResp, err := s.Impl.GetPageText(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) GetPageTextStructured(request *requests.GetPageTextStructured, resp *responses.GetPageTextStructured) error {
	var err error
	implResp, err := s.Impl.GetPageTextStructured(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) OpenDocument(request *requests.OpenDocument, resp *responses.OpenDocument) error {
	var err error
	implResp, err := s.Impl.OpenDocument(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPageInDPI(request *requests.RenderPageInDPI, resp *responses.RenderPage) error {
	var err error
	implResp, err := s.Impl.RenderPageInDPI(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPageInPixels(request *requests.RenderPageInPixels, resp *responses.RenderPage) error {
	var err error
	implResp, err := s.Impl.RenderPageInPixels(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPagesInDPI(request *requests.RenderPagesInDPI, resp *responses.RenderPages) error {
	var err error
	implResp, err := s.Impl.RenderPagesInDPI(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderPagesInPixels(request *requests.RenderPagesInPixels, resp *responses.RenderPages) error {
	var err error
	implResp, err := s.Impl.RenderPagesInPixels(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}

func (s *PdfiumRPCServer) RenderToFile(request *requests.RenderToFile, resp *responses.RenderToFile) error {
	var err error
	implResp, err := s.Impl.RenderToFile(request)
	if err != nil {
		return err
	}

	// Overwrite the target address of resp to the target address of implResp.
	*resp = *implResp

	return nil
}
